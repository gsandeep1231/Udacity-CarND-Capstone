#!/usr/bin/env python

import rospy
from geometry_msgs.msg import PoseStamped, TwistStamped
from styx_msgs.msg import Lane, Waypoint
from std_msgs.msg import Int32

import math

'''
This node will publish waypoints from the car's current position to some `x` distance ahead.

As mentioned in the doc, you should ideally first implement a version which does not care
about traffic lights or obstacles.

Once you have created dbw_node, you will update this node to use the status of traffic lights too.

Please note that our simulator also provides the exact location of traffic lights and their
current status in `/vehicle/traffic_lights` message. You can use this message to build this node
as well as to verify your TL classifier.

TODO (for Yousuf and Aaron): Stopline location for each traffic light.
'''

LOOKAHEAD_WPS = 200 # Number of waypoints we will publish. You can change this number


class WaypointUpdater(object):
	def __init__(self):
		rospy.init_node('waypoint_updater')

		# Subscribers
		rospy.Subscriber('/current_pose', PoseStamped, self.pose_cb, queue_size=1)
		rospy.Subscriber('/base_waypoints', Lane, self.waypoints_cb, queue_size=1)
		rospy.Subscriber('/traffic_waypoint', Int32, self.traffic_cb, queue_size=1)
		rospy.Subscriber('/obstacle_waypoint', Int32, self.obstacle_cb, queue_size=1)
		rospy.Subscriber('/current_velocity', TwistStamped, self.velocity_cb, queue_size=1)

		# Publisher
		self.final_waypoints_pub = rospy.Publisher('final_waypoints', Lane, queue_size=1)

		self.closest_wp = -1

		# Main loop
		rate = rospy.Rate(10)
		while not rospy.is_shutdown():
			rospy.logwarn('=========================================================================')
			self.get_waypoints()
			rate.sleep()
		

	def copy_waypoint(self, waypoint):
		p = Waypoint()
		p.pose.pose.position.x = waypoint.pose.pose.position.x
		p.pose.pose.position.y = waypoint.pose.pose.position.y
		p.pose.pose.position.z = waypoint.pose.pose.position.z
		p.pose.pose.orientation.x = waypoint.pose.pose.orientation.x
		p.pose.pose.orientation.y = waypoint.pose.pose.orientation.y
		p.pose.pose.orientation.z = waypoint.pose.pose.orientation.z
		p.pose.pose.orientation.w = waypoint.pose.pose.orientation.w
		p.twist.twist.linear.x = waypoint.twist.twist.linear.x
		p.twist.twist.linear.y = waypoint.twist.twist.linear.x
		p.twist.twist.linear.z = waypoint.twist.twist.linear.x
		p.twist.twist.angular.x = waypoint.twist.twist.angular.x
		p.twist.twist.angular.y = waypoint.twist.twist.angular.x
		p.twist.twist.angular.z = waypoint.twist.twist.angular.x
		return p

	def get_waypoints(self):
		self.final_waypoints = []
		rospy.logwarn('SAN: Inside get_waypoints')
		if hasattr ( self, 'base_waypoints' ) and hasattr ( self, 'current_pose' ) and hasattr(self, 'current_velocity'):
			wp_list = self.base_waypoints.waypoints
			wp_len = len(wp_list)
			curr_pose = self.current_pose.pose.position

			rospy.logwarn('SAN: current_vel: %s', self.current_velocity)
			rospy.logwarn('SAN: wp len: %s', wp_len)

			# Find closes waypoint
			closest_wp = -1
			closest_dist = 999999
			for i in range(wp_len):
				wp = wp_list[i].pose.pose.position
				distance = math.sqrt((wp.x-curr_pose.x)**2 + (wp.y-curr_pose.y)**2 + (wp.z-curr_pose.z)**2 )
				if distance < closest_dist:
					closest_dist = distance
					closest_wp = i
			rospy.logwarn('closest_wp: %s', closest_wp)

			for i in range(closest_wp, closest_wp + LOOKAHEAD_WPS):
				wp_index = i % wp_len
				wp = self.copy_waypoint(wp_list[wp_index])
				self.final_waypoints.append(wp)

			self.publish_final_waypoints()


	def publish_final_waypoints(self):
		lane = Lane()
		lane.header.frame_id = '/world'
		lane.header.stamp = rospy.Time.now()
		lane.waypoints = self.final_waypoints
		self.final_waypoints_pub.publish(lane)

	def velocity_cb(self, msg):
		self.current_velocity = msg.twist.linear.x
		#rospy.logwarn('WPU: current_velocity: %s', self.current_velocity)
		pass

	def pose_cb(self, msg):
		self.current_pose = msg
		pass

	def waypoints_cb(self, waypoints):
		self.base_waypoints = waypoints
		pass


	def traffic_cb(self, msg):
		# TODO: Callback for /traffic_waypoint message. Implement
		self.traffic_waypoint = msg.data

	def obstacle_cb(self, msg):
		# TODO: Callback for /obstacle_waypoint message. We will implement it later
		pass

	def get_waypoint_velocity(self, waypoint):
		return waypoint.twist.twist.linear.x

	def set_waypoint_velocity(self, waypoints, waypoint, velocity):
		waypoints[waypoint].twist.twist.linear.x = velocity

	def distance(self, waypoints, wp1, wp2):
		dist = 0
		dl = lambda a, b: math.sqrt((a.x-b.x)**2 + (a.y-b.y)**2  + (a.z-b.z)**2)
		for i in range(wp1, wp2+1):
			dist += dl(waypoints[wp1].pose.pose.position, waypoints[i].pose.pose.position)
			wp1 = i
		return dist


if __name__ == '__main__':
	try:
		WaypointUpdater()
	except rospy.ROSInterruptException:
		rospy.logerr('Could not start waypoint updater node.')
